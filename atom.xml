<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[云麓漫钞]]></title>
  <subtitle><![CDATA[「自己所選擇的，就是你宇宙的真實」]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://zettoone.github.io/"/>
  <updated>2017-03-18T21:36:18.000Z</updated>
  <id>http://zettoone.github.io/</id>
  
  <author>
    <name><![CDATA[某雲]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[《富爸爸，穷爸爸》读后感]]></title>
    <link href="http://zettoone.github.io/2016/03/24/rich-dad-poor-dad/"/>
    <id>http://zettoone.github.io/2016/03/24/rich-dad-poor-dad/</id>
    <published>2016-03-24T04:00:00.000Z</published>
    <updated>2017-03-18T21:36:18.000Z</updated>
    <content type="html"><![CDATA[<p>不知不觉间已经慢慢走近了30岁的大关了，自己心理或多或少地也开始慢慢有了压力，工作的压力，家庭的压力，而各种压力其实归根到底都是一句“有钱就好了”。所以接着上周试用Kindle Unlimited之机，我把很多年前就听说过的《富爸爸，穷爸爸》花了一天读完。诚然这是一本畅销书：字里行间透露出对财富的重视读着不免觉得有点俗；里面说的道理读过后也许会觉得也没什么了不起的；作者自己的致富例子你也可以用一句“呵自吹自擂罢了”一口带过。可是读完后静心想想，书里的一些想法确实对自己有了新的启发。</p>
<p>对于我自己来说，感触最大的就是“人应该区分清楚自己的职业和自己的事业”。出来工作一年多了，其实很多发现自己作为一个初级工程师，参加一个产品的开发，而能够产生影响的方面其实很有限。你没有办法直接了解客户的需要，因为这是产品经理的工作。你没有办法决定技术的选型，因为这是项目架构师的工作。即使你有个非常合理的想法希望在项目里面推广，而且你也说服了团队里的所有资深工程师，你也未必能够成功：因为项目有着自己technical debt，而实现你的想法也许需要投资很多的时间人力资源，而可能是你的团队没有办法做到的。从某个程度上来说，工程师也不过是个士兵。指挥官下令冲锋时你只能埋下头向前跑。举起枪发现没有校准，向前冲了发现方向不对，战局不利然后被大部分放弃，这一切一切你都只能抱怨却又无法改变。而即使胜利了，你又获得了什么？</p>
<p>想到这里我已经明白了，为公司工作只是我的一个职业，为生计所迫也并无他法。可是这终究不是我自己真正的追求。那我自己到底想追求什么？其实我现在也并不知道。但是我明白，为了能够做我自己自己的事业，我至少应该为起步进行准备：资金，知识，技术和团队。这也是书中所说的：学会理财和能力积累。明白了道理就自然会为了需要而奋斗。被困在自己的职业里为他人的事业工作，一步步慢慢地腐烂并被淘汰，实在是一件很可怕的事情。</p>
<p>书中给我的另外一个启发就是，人必须全面。我其实心里也明白自己常陷于职业程序员的一个常见思想误区：为了进步我只能在技术上一直精益求精。在技术上有自己的追求，本应不是坏事。然而过于专注在一个点的结果就是紧盯着细节，却忘记了大局。首先技术成长不过是职业发展中的一个方面；其次是职业发展也只是人生中的一个重要方面。回想起这些年读过的硅谷轶事，大多是天才怪客的成功史，宣扬的观念都是只要技术好nerd也能成功。可是工作之后发现，软件工程不过也是和人打交道的社会工程。聪明很重要，但是这并不完全是工作中的所有要素。相反，因为优秀的工程师往往左脑发达，导致其实工作上非常的egocentric，这样的人往往很难合作。学会从自己专注的领域走出来，学学没难度的理财，练练没意思的人际交往，听听没逻辑的人的想法，自己的心象风景其实会大有不同。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>不知不觉间已经慢慢走近了30岁的大关了，自己心理或多或少地也开始慢慢有了压力，工作的压力，家庭的压力，而各种压力其实归根到底都是一句“有钱就好了”。所以接着上周试用Kindle Unlimited之机，我把很多年前就听说过的《富爸爸，穷爸爸》花了一天读完。诚然这是一本畅销书]]>
    </summary>
    
      <category term="investment" scheme="http://zettoone.github.io/tags/investment/"/>
    
      <category term="cn" scheme="http://zettoone.github.io/categories/cn/"/>
    
      <category term="personal" scheme="http://zettoone.github.io/categories/cn/personal/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[How to Print Rust Structs/Enums]]></title>
    <link href="http://zettoone.github.io/2015/10/08/rust-debug-structs/"/>
    <id>http://zettoone.github.io/2015/10/08/rust-debug-structs/</id>
    <published>2015-10-09T03:32:42.000Z</published>
    <updated>2017-03-18T21:35:57.000Z</updated>
    <content type="html"><![CDATA[<p>在Rust中定义结构体(<code>struct</code>)或枚举(<code>enum</code>)类型时，可以在定义前加上属性<code>#[derive(Debug)]</code>。这样可以让编译器为该类型自动派生(derive)出<code>std::fmt::Debug</code> <code>trait</code>的实现。然后在打印时使用<code>{:?}</code>则可以打印出变量类型的数据表示。</p>
<p>注意的是，如果你希望用<code>{}</code>打印结构体或者枚举变量，你还是需要为其实现<code>std::fmt::Display</code> <code>trait</code>。</p>
<p>另外，如果你的结构体中还包含了别的结构体，你可能还是需要自己实现<code>std::fmt::Debug</code> <code>trait</code>来达到自己希望的打印效果。例如在下例(<a href="http://is.gd/C4QouO" target="_blank" rel="external">Rust Playground传送门</a>)中，<code>Deep(Structure(7))</code>会打印出<code>Deep(Structure(7))</code>，而<code>Flat(Structure(7))</code>则会通过自定义的实现打出<code>Structure(7)</code>。</p>
<figure class="highlight rust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">use</span> std::fmt;</div><div class="line"></div><div class="line"><span class="meta">#[derive(Debug)]</span></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Structure</span></span>(<span class="keyword">i32</span>);</div><div class="line"></div><div class="line"><span class="meta">#[derive(Debug)]</span></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Deep</span></span>(Structure);</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Flat</span></span>(Structure);</div><div class="line"><span class="keyword">impl</span> fmt::Debug <span class="keyword">for</span> Flat &#123;</div><div class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">fmt</span></span>(&amp;<span class="keyword">self</span>, f: &amp;<span class="keyword">mut</span> fmt::Formatter) -&gt; fmt::<span class="built_in">Result</span> &#123;</div><div class="line">        <span class="keyword">match</span> *<span class="keyword">self</span> &#123;</div><div class="line">            Flat(Structure(num)) =&gt; <span class="built_in">write!</span>(f, <span class="string">"Structure(&#123;&#125;)"</span>, num),</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</div><div class="line">  <span class="built_in">println!</span>(<span class="string">"Structure &#123;:?&#125;: "</span>, Structure(<span class="number">3</span>));</div><div class="line">  <span class="built_in">println!</span>(<span class="string">"Deep &#123;:?&#125;: "</span>, Deep(Structure(<span class="number">7</span>)));</div><div class="line">  <span class="built_in">println!</span>(<span class="string">"Flat &#123;:?&#125;: "</span>, Flat(Structure(<span class="number">7</span>)));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>在Rust中定义结构体(<code>struct</code>)或枚举(<code>enum</code>)类型时，可以在定义前加上属性<code>#[derive(Debug)]</code>。这样可以让编译器为该类型自动派生(derive)出<code>std::fmt]]>
    </summary>
    
      <category term="rust" scheme="http://zettoone.github.io/tags/rust/"/>
    
      <category term="cn" scheme="http://zettoone.github.io/categories/cn/"/>
    
      <category term="dev" scheme="http://zettoone.github.io/categories/cn/dev/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[最近油价变动的一些笔记]]></title>
    <link href="http://zettoone.github.io/2015/01/24/on-oil/"/>
    <id>http://zettoone.github.io/2015/01/24/on-oil/</id>
    <published>2015-01-24T05:00:00.000Z</published>
    <updated>2017-03-18T21:35:50.000Z</updated>
    <content type="html"><![CDATA[<p>以前住的公寓到公司不到10分钟的步行距离，让无须驾驶的我没法切身感受到油价变化对自己生活的影响。可是自从上个月搬家后，我变得必须每天和车了。上周车的油箱空了，我按照Maggie的嘱咐，到加油站买40加元的91汽油，最后竟然装不下Mini的油箱，我才真正明白：这油现在也是太便宜了。</p>
<p>事实上，这半年里油价已经暴跌了超过50%了。去年6月时，每桶的油价还一度停留在$100的位置，而今天的每桶油价已经到达$45了(<a href="http://www.nasdaq.com/markets/crude-oil.aspx?timeframe=1y" target="_blank" rel="external">source</a>)。这次暴跌的原因不外乎是供求关系：萧条的国际经济所消耗的石油比市场预期的低，而同时OPEC出产了高于市场预期的石油。而美国疯狂的页岩气开采更是为本来供求不衡的局面火上加油：自从2010年来，美国可能新建了将近20000个新的页岩气井(<a href="http://www.economist.com/news/leaders/21635472-economics-oil-have-changed-some-businesses-will-go-bust-market-will-be" target="_blank" rel="external">source</a>)。通过页岩气，美国已经提升了1/3的油产量。</p>
<p>油价的下跌总体来说对消费者是有益的，尤其是对于原油进口国。下跌的油价会进一步减少通货膨胀，同时也有可能让中央银行采取更宽松的货币政策。然而对于石油出产国，例如俄罗斯和加拿大，这次大规模的石油价格下跌对它们的经济造成了很大影响。而加拿大的石油资源是油砂，其开采成本本来就偏高；当油价一下挫，开采计划在经济上就不可行。几天前，加拿大银行进一步调低了本来已经很低的利率，而加元的汇率经一步下挫，春季的物价上涨已是无法避免。</p>
<p>OPEC，尤其是里面领头的沙特阿拉伯，完全有可能通过减产来提高原油价格。事实上，OPEC上的几个成员已经提出希望减产来把石油价格推回更好的位置。可是沙特阿拉伯并不希望降低产量而流失市场份额，而相反他们希望采取压低石油价格的方式来赢得和页岩气的竞争。毕竟沙特的石油开采成本非常低（每桶只需要$5-$6），他们完全有资本进行产量和价格竞争。而因为页岩气的生命周期很短，页岩气开发者必须获得持续的资本投入来开发新油井来维持产量。不少页岩气开发者是带着债务开始工程的。随着油价的暴跌，不少公司背负着破产的风险。根据估计，美国的页岩气工程必须在$60-70才能维持收支平衡。现在的价格很有可能迫使资本撤离页岩气工程，而后的结果很有可能是页岩气减产和石油价格上调。</p>
<p>从长远来看，页岩气还是充满前景的。尽管页岩气井的产量无法持久，经过一年的开采后产量一般会下降60-70%；可是相应的，页岩气井的开法花销相对较低，每个新井只需要100万美元，时间最少只需要一周。相比起来，现有的新石油来源都价格昂贵，例如说开采深海的时候资源必须投资大量的资本和时间。</p>
<h2 id="Reference">Reference</h2><ol>
<li><a href="http://www.economist.com/news/leaders/21635472-economics-oil-have-changed-some-businesses-will-go-bust-market-will-be" target="_blank" rel="external">Sheikhs v shale</a></li>
<li><a href="http://www.economist.com/news/finance-and-economics/21635505-will-falling-oil-prices-curb-americas-shale-boom-bind" target="_blank" rel="external">Shale oil: In a bind</a></li>
<li><a href="https://www.google.com/url?q=http://www.economist.com/news/finance-and-economics/21635510-what-oil-cartel-up-making-best-low-price" target="_blank" rel="external">OPEC: Making the best of a low price</a></li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p>以前住的公寓到公司不到10分钟的步行距离，让无须驾驶的我没法切身感受到油价变化对自己生活的影响。可是自从上个月搬家后，我变得必须每天和车了。上周车的油箱空了，我按照Maggie的嘱咐，到加油站买40加元的91汽油，最后竟然装不下Mini的油箱，我才真正明白：这油现在也是太便]]>
    </summary>
    
      <category term="energy" scheme="http://zettoone.github.io/tags/energy/"/>
    
      <category term="cn" scheme="http://zettoone.github.io/categories/cn/"/>
    
      <category term="economics" scheme="http://zettoone.github.io/categories/cn/economics/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用NVM管理Node.js]]></title>
    <link href="http://zettoone.github.io/2014/05/17/nvm/"/>
    <id>http://zettoone.github.io/2014/05/17/nvm/</id>
    <published>2014-05-17T04:00:00.000Z</published>
    <updated>2017-03-18T21:35:28.000Z</updated>
    <content type="html"><![CDATA[<h2 id="安装NVM">安装NVM</h2><pre><code>curl http<span class="variable">s:</span>//raw.github.<span class="keyword">com</span>/creationix/nvm/master/install.<span class="keyword">sh</span> | <span class="keyword">sh</span>
</code></pre><h2 id="使用Node-js">使用Node.js</h2><pre><code>nvm install <span class="number">0.10</span><span class="number">.28</span>
nvm use <span class="number">0.10</span><span class="number">.28</span>
nvm alias <span class="keyword">default</span> <span class="number">0.10</span><span class="number">.28</span>
</code></pre><h2 id="使所有用户共用同一个Node-js版本">使所有用户共用同一个Node.js版本</h2><pre><code>n=<span class="variable">$(</span>which node);
n=<span class="variable">${</span>n<span class="string">%/bin/</span>node};
chmod -<span class="constant">R</span> <span class="number">755</span> <span class="variable">$n</span>/bin/*;
sudo cp -r <span class="variable">$n</span>/{bin,<span class="class"><span class="keyword">lib</span>,<span class="title">share</span>} /<span class="title">usr</span>/<span class="title">local</span></span>
</code></pre><p>NVM默认把Node.js安装到用户的Home目录下。为了使所有用户都能使用同一份Node.js的，上述命令会把当前激活的Node.js复制到<code>/usr/local/bin</code>目录下,并把权限设置成所有用户都能访问。如果你之后激活了另外一个版本(<code>nvm use vXX.XX.XX</code>)并向让它成为全局的Node.js版本，那只需要重新执行一遍上面的命令。</p>
<p>EOF</p>
<hr>
<h2 id="Reference">Reference</h2><ul>
<li><a href="https://www.digitalocean.com/community/articles/how-to-install-node-js-with-nvm-node-version-manager-on-a-vps" target="_blank" rel="external">How To Install Node.js with NVM (Node Version Manager) on a VPS</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="安装NVM">安装NVM</h2><pre><code>curl http<span class="variable">s:</span>//raw.github.<span class="keyword">com</span>/creationix/nvm/ma]]>
    </summary>
    
      <category term="node.js" scheme="http://zettoone.github.io/tags/node-js/"/>
    
      <category term="cn" scheme="http://zettoone.github.io/categories/cn/"/>
    
      <category term="dev" scheme="http://zettoone.github.io/categories/cn/dev/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何在VS2012中创建XNA项目]]></title>
    <link href="http://zettoone.github.io/2013/09/14/xna-vs2012/"/>
    <id>http://zettoone.github.io/2013/09/14/xna-vs2012/</id>
    <published>2013-09-14T04:00:00.000Z</published>
    <updated>2017-03-18T21:35:00.000Z</updated>
    <content type="html"><![CDATA[<p>XNA是渣软已经官方宣布死亡的一套游戏开发工具，正因为如此官方只支持到VS2010，如果想用更先进的VS2012来开发XNA程序的话，就必须又折腾一番，真是够了……</p>
<ul>
<li>你必须先安装VS2010（Orz），从节省时间考虑就装个C# Express好了</li>
<li>安装最新的<a href="http://www.xbox.com/en-US/LIVE/PC/DownloadClient" target="_blank" rel="external">Windows Marketplace Client</a></li>
<li>安装XNA Game Studio 4.0</li>
<li>将XNA的扩展文件夹从VS2010的路径拷贝到VS2012，如</li>
</ul>
<figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">xcopy /e "C:<span class="symbol">\P</span>rogram Files (x86)<span class="symbol">\M</span>icrosoft Visual Studio 10.0<span class="symbol">\C</span>ommon7<span class="symbol">\I</span>DE<span class="symbol">\E</span>xtensions<span class="symbol">\M</span>icrosoft<span class="symbol">\X</span>NA Game Studio 4.0" "C:<span class="symbol">\P</span>rogram Files (x86)<span class="symbol">\M</span>icrosoft Visual Studio 11.0<span class="symbol">\C</span>ommon7<span class="symbol">\I</span>DE<span class="symbol">\E</span>xtensions<span class="symbol">\M</span>icrosoft<span class="symbol">\X</span>NA Game Studio 4.0"</div></pre></td></tr></table></figure>
<ul>
<li>打开扩展文件夹里的<code>extension.vsixmanifest</code>，将里面的<code>Version</code>改成<code>11</code></li>
<li>刷新一下VS</li>
</ul>
<figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">"C:<span class="symbol">\P</span>rogram Files (x86)<span class="symbol">\M</span>icrosoft Visual Studio 11.0<span class="symbol">\C</span>ommon7<span class="symbol">\I</span>DE<span class="symbol">\d</span>evenv.exe" /setup</div></pre></td></tr></table></figure>
<ul>
<li>到<code>%LocalAppData%\Microsoft\VisualStudio\11.0\Extensions</code>目录下，把<code>extensionSdks.en-US.cache</code>和<code>extensions.en-US.cache</code>这样的缓存文件删除，不然新建项目时XNA扩展会无法加载。</li>
</ul>
<p>这里有个小trick，当VS挂掉而你想知道为什么时，使用下面的命令启动VS</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">"C:\Program Files (x86)\Microsoft Visual Studio 11.0\Common7\IDE\devenv.exe"</span> /log</div></pre></td></tr></table></figure>
<p>这样的话VS就会生成debug log到<code>%AppData%\Microsoft\VisualStudio\11.0\ActivityLog.xml</code>了。</p>
<p>EOF</p>
<hr>
<h2 id="Reference">Reference</h2><ul>
<li><a href="http://stackoverflow.com/questions/10881005/how-to-install-xna-game-studio-on-visual-studio-2012" target="_blank" rel="external">How to install XNA game studio on Visual Studio 2012?</a></li>
<li><a href="http://stackoverflow.com/questions/12849107/how-to-install-the-xna-game-studio-4-0-in-windows-8" target="_blank" rel="external">How to install the XNA Game Studio 4.0 in Windows 8?</a></li>
<li><a href="http://blogs.msdn.com/b/astebner/archive/2012/02/29/10274694.aspx" target="_blank" rel="external">How to work around a possible XNA Game Studio or Windows Phone SDK install failure on Windows 8</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>XNA是渣软已经官方宣布死亡的一套游戏开发工具，正因为如此官方只支持到VS2010，如果想用更先进的VS2012来开发XNA程序的话，就必须又折腾一番，真是够了……</p>
<ul>
<li>你必须先安装VS2010（Orz），从节省时间考虑就装个C# Express好了<]]>
    </summary>
    
      <category term="gamedev" scheme="http://zettoone.github.io/tags/gamedev/"/>
    
      <category term="xna" scheme="http://zettoone.github.io/tags/xna/"/>
    
      <category term="cn" scheme="http://zettoone.github.io/categories/cn/"/>
    
      <category term="dev" scheme="http://zettoone.github.io/categories/cn/dev/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[iTunes乱码处理]]></title>
    <link href="http://zettoone.github.io/2011/11/19/itunes-tag/"/>
    <id>http://zettoone.github.io/2011/11/19/itunes-tag/</id>
    <published>2011-11-19T05:00:00.000Z</published>
    <updated>2017-03-18T21:34:48.000Z</updated>
    <content type="html"><![CDATA[<p>使用Mac时一個很头疼的问题就是mp3导入iTunes时的各种乱码。搜索后并没有发现很好的解决方法，所以就还是按在Ubuntu时的方式来料理了。不知道大家有没有更简单的方式。</p>
<p>首先是安装Mutagen</p>
<figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip <span class="keyword">install</span> mutagen</div></pre></td></tr></table></figure>
<p>使用方法时配合find命令即可，我比较喜欢的方式是：</p>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">find</span> . -iname <span class="string">"*.mp3"</span> -execdir mid3iconv -e gbk --<span class="built_in">remove</span>-v1 &#123;&#125; \;</div></pre></td></tr></table></figure>
<p>效果是转换当前目录及子目录下的所有mp3标签为Unicode编码，并同时填满ID3v2, APEv2标签。</p>
<p>-e gbk 参数只针对gbk编码，其他编码的文件则相应修改，如 -e big5 或者 -e gb18030。</p>
<p>--remove-v1 参数则删除ID3v1标签，因为ID3v1不支持中文Unicode 编码Orz……所以如果播放器只支持ID3v1标签的话就会遇到问题——一片空白，这也是我还没想到解决办法的地方。不过就iTunes来说这样就足够了。</p>
<hr>
<p>EDIT1(May 30, 2014 12:42:34):</p>
<p>在OS X Mavericks下曾经遇到过<code>dyld: Library not loaded: /usr/local/homebrew/homebrew/opt/readline/lib/libreadline.6.2.dylib</code>这样的问题，我解决的方法是用下面的命令重新安装<code>readline</code>:</p>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">brew </span><span class="keyword">install </span>--<span class="keyword">build-from-source </span>readline</div></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>使用Mac时一個很头疼的问题就是mp3导入iTunes时的各种乱码。搜索后并没有发现很好的解决方法，所以就还是按在Ubuntu时的方式来料理了。不知道大家有没有更简单的方式。</p>
<p>首先是安装Mutagen</p>
<figure class="highlight ]]>
    </summary>
    
      <category term="itunes" scheme="http://zettoone.github.io/tags/itunes/"/>
    
      <category term="cn" scheme="http://zettoone.github.io/categories/cn/"/>
    
      <category term="misc" scheme="http://zettoone.github.io/categories/cn/misc/"/>
    
  </entry>
  
</feed>
